[
    {
        "image": "img\\笔记.png",
        "title": "测试文章：这是一个测试",
        "P_content": "这是一个测试。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/140926047",
        "date": "发布博客 1 小时前 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "存储类别、链接和内存管理个人理解笔记（c/c++）（待更新）",
        "P_content": "我们光知道有了这个房间，但我们该如何有效的利用空间呢？首先，我们构思一个场景：我们在房间里面用餐巾纸，抽一张，用完丢到了垃圾袋，当垃圾袋满了是需要把垃圾袋丢掉的吧。那如果我们一直制造垃圾，一直不处理垃圾，最后房间注定就会变成垃圾堆的。计算机的内存也是如此，而当我们运行程序的时候，一行int a = 0；的代码使用了内存这个空间的一部分，我们忽略了一个问题，当我们用完了变量a，我们并没有执行“丢掉垃圾袋”的操作。事实上，",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/134961581",
        "date": "2023.12.13 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "C语言：宏（初步认识）",
        "P_content": "所以如果输出 3 * ADD（2，3）的话，结果不是3 * 5 = 15而是3 * 2 + 3，结果为9如果想要正确的结果，应该这样写：#define ADD（X，Y） （（X） + （Y））这样就是3 * ((2)+(3)) = 3 * 5 = 15了为什么要小括号？如果你设定的是X*Y，然后再括号里写的是ADD（2 + 3， 3）得到的结果同理，会变成2 + 3 * 3 = 11而不是15。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/134769338",
        "date": "2023.12.03 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记14（静态与属性：未完成）",
        "P_content": "static 也就是静态的概念，关键时想清楚数据的归属问题，数据的归属是一个简单而朴实的概念。在多人协作的大型项目，大型的软件项目往往需要很多人参与。而且每个人对系统的理解都是很有限的。把这两者分清楚这样就从根本上防范了错误使用的可能，这就是所谓的访问控制。举例可以在将想要定义在另外一个文件里，我们的类定义可以放在不同的文件中。静态，是描述一类数据，不属于某个具体的对象而是属于整个类型。static 一直没有解释这个的含义，也就是静态的含义。另外还有访问控制和属性。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/132643058",
        "date": "2023.09.02 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记13（价值和引用）",
        "P_content": "举一个例子s1 代表在学生类中的一个对象，名字小明，8岁s2 = s1s1是学生对象小明，结果是打印结果相同，那么s1和s2？我们可以做一个测试验证一下：将s1后定义成—> 小明，10岁后打印s1和s2结果是修改s1的分数后，打印出的这就充分说明了，s1和s2不是两个相等的，内容相同的对象，而这就涉及到编程里的一个（引用变量赋值）",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/132259648",
        "date": "2023.08.29 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记12（类和对象）",
        "P_content": "上述代码中，因为使用三个数组来管理所有信息，所以感觉名字是一个数组，年龄是一个数组，分数是一个数组。那么小明的所有信息都是下标为0的数组，以此类推，但是数组之间没有什么紧密的联系，相反名字与名字之间，年龄与年龄之间倒是因为在同一个数组中紧密联系着，这样显得不够自然。应当让每个学生自己的信息结合在一起，这样当某一个同学需要移除可以将该同学所有信息同名字一同移除，而不是移除名字，再移除年龄等信息。这亦是一个数据的归属问题，学生的数据应该归属于学生，这样的设计才最清楚最易理解。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/132259246",
        "date": "2023.08.13 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记11（二维数组；变量的生命期）",
        "P_content": "一个变量在何时生，何时死？我们可以从具体例子入手。先从函数参数讲起，我们在main函数中定义一个int值a = 3，同时在main函数之外定义一个函数Func，在Func函数中打印a＋1，最后在main函数中调用Func函数。如图//a++;a = a + 1;int a = 3;Func(a);此时显然得到的答案是a = 4那么如果在这时同时在main中直接打印a的值，会得到什么结果？//a++;a = a + 1;int a = 3;Func(a);",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/132189388",
        "date": "2023.08.10 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记10（数组）",
        "P_content": "在有了数组以后，可以实现各种各样的功能，但是也随之出现了复杂困难的问题等待着解决。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/132118890",
        "date": "2023.08.05 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记9（函数/方法）",
        "P_content": "在之前的学习中，写过了很多例子，但是在之前实践写代码的时候，总会出现一些难受的小问题。尤其是要用到相同的代码时不得不重新写一次，同时当出现了一些暂时不需要的代码我们不得不注释掉。注释的多了代码也就变得凌乱了。当函数出现，很好的解决了这两个问题，让代码更加的有条理。功能重复的代码应整合在一起。定义函数和调用函数的格式。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/132012161",
        "date": "2023.08.04 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习笔记8（switch case和枚举）",
        "P_content": "即春代表0，夏代表1，秋代表2，冬代表3。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131874058",
        "date": "2023.07.27 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记7（循环体）",
        "P_content": "循环是C#前期学习的核心内容，是编程中最重要也是最常用的环节。本章将优先讲解while循环。在条件判断为true的情况下，会不断地执行循环体中的内容。直到条件变为false的时候，循环体就不再执行了。直接跳转到大括号后面这个例子是一个简单的从1打印到100的例子。int 定义了一个初始值为0 的值iwhile（i < 100）也就是0小于100时判断为true打印出0加1，即1，然后i++，之后再次回到判断条件，准备下次循环，直到i++到100后，判断变为false则结束循环。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131833416",
        "date": "2023.07.21 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记6（条件判断if）",
        "P_content": "有了else if的帮助，条件判断容易写了很多，并且可以避免ABCD四种情况同时打印的可能。要求，提示用户输入一个分数（0~100），程序告诉用户该分数属于哪个等级。在C#中，一个等号是赋值运算，而判断相等需要用两个等号表示。在一行一行按顺序执行的代码的基础上，加入条件判断语句if就可以实现代码的分支了。若超过范围则提示无法查出等级，若不符合A则给予鼓励，若符合A则表示恭喜。同样可以输出相同的结果，且这样的写法显然符合字符串的转换规则。**其中，一个if到一个else是一个整体代码。if 语句的完整形式。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131744982",
        "date": "2023.07.15 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记5（字符串格式化/转义字符（\\n&\\t））",
        "P_content": "解释：打印时可以按照序号0123......的顺序分别编号，然后在后面分别用编号指代想要打印的结果，最后还会按照大小顺序打印。你可能已经注意到了，在写代码时候，经常有打印变量的值、打印结果的需求。在计算机系统中，有很多特殊的字符他们往往看不见也摸不着，但是却能控制字符串打印的格式。当前的变量名称，而且变量的值会成为字符串的一部分自动拼接，相对于第二种方法。（空间不一，视情况改变）（不打印字符串仅仅将内容拼接到一个字符串变量中也叫字符串格式化。，这种按特定的格式组合字符串的技术，就叫。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131665223",
        "date": "2023.07.11 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "C#同步学习笔记4（变量类型转换）",
        "P_content": "/ a是整型乘以1.0f时，被隐式转换成了浮点数类型，也就是4.0f。我们写的C#代码在运行之前呢，就会被转换为另一种计算机更容易识别的代码，这个转换的过程就称之为。以上的运行代码的例子中，因为变量和数值的类型变化是在编译时默默进行的，因此也被称之为。其实一开始用Console.ReadLine 的时候，就一直有一个疑问，你看，由于运算先于赋值，所以ff的结果依然是1（1.0f）那么，如何可以使ff的结果变为浮点值呢？C#标准库中，已经帮我们提供了两种转换的方法，一个是。能表示的范围更小的类型。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131406786",
        "date": "2023.06.27 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记3(运算符)",
        "P_content": "这次简单讲述加减乘除等（一下输出结果均不以控制台格式展现）想要在输出结果中的看到数字代表的内容可以这样表示其中，由于程序是将dog重新赋值为dog - cat 的结果，所以若再输出dog  -  cat并不会得到预计的结果，即减法中第一个结果11=11-10=1后——再输出1-10 得到-9而第二个结果直接输出结果1，是我们想要得到的运算结果。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131329494",
        "date": "2023.06.21 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记2（hello world）",
        "P_content": "关于开发环境的配置不再赘述，本笔记使用的是vs2022与.Net 7.0版本（不使用顶级语句）选择C#控制台应用模板，创建新项目之后，就可以看到范例代码，hello world（如下）Main函数中第一行执行代码Console.WriteLine（）；",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131274745",
        "date": "2023.06.18 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "同步学习C#笔记1（认识C#）",
        "P_content": "一款开发语言，继C++，Java，python等优缺点后，结合现代大型软件的实践设计，推出的新的编程语言。因此，其特点在于现代化与创新。",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131274333",
        "date": "2023.06.18 ·"
    },
    {
        "image": "img\\笔记.png",
        "title": "Cloudflare是什么",
        "P_content": "自用笔记，自用笔记，自用笔记！！！有误区与不足欢迎指正！！！",
        "url": "https://blog.csdn.net/weixin_49945442/article/details/131231026",
        "date": "2023.06.16 ·"
    }
]